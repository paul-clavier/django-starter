from datetime import datetime, timedelta
from secrets import token_urlsafe
from typing import Tuple

from django.contrib.auth.hashers import check_password, make_password
from django.db import models
from django.contrib.auth.models import AbstractUser
from django.contrib.auth.base_user import BaseUserManager
from django.db.models.functions import Lower
from django.utils import timezone
from django.utils.translation import gettext_lazy as _


class CustomUserManager(BaseUserManager):
    """
    Custom user manager is required because we need to handle email and full
    name accordingly.
    """

    def create_user(
        self, email, password, first_name, last_name, **extra_fields
    ) -> "User":
        if not email:
            raise ValueError("Email must be set")
        email = self.normalize_email(email)
        user = User(
            email=email, first_name=first_name, last_name=last_name, **extra_fields
        )
        user.set_password(password)
        user.save()
        return user

    def create_superuser(
        self, email, password, first_name, last_name, **extra_fields
    ) -> "User":
        extra_fields.setdefault("is_staff", True)
        extra_fields.setdefault("is_superuser", True)
        extra_fields.setdefault("is_active", True)

        if extra_fields.get("is_staff") is not True:
            raise ValueError("Superuser must have is_staff=True.")
        if extra_fields.get("is_superuser") is not True:
            raise ValueError("Superuser must have is_superuser=True.")
        return self.create_user(
            email, password, first_name=first_name, last_name=last_name, **extra_fields
        )


class User(AbstractUser):
    username = None  # type: ignore[assignment]  # mypy does not understand we override username
    first_name = models.CharField(_("first name"), max_length=150)
    last_name = models.CharField(_("last name"), max_length=150)
    email = models.EmailField(unique=True)
    last_read_date = models.DateTimeField(default=timezone.now)
    verified = models.BooleanField(default=False)

    USERNAME_FIELD = "email"
    REQUIRED_FIELDS = ["first_name", "last_name"]

    objects: CustomUserManager = CustomUserManager()  # type: ignore[assignment]  # mypy does not understand we override objects

    @staticmethod
    def get_first_and_last_name_from_full_name(full_name: str) -> Tuple[str, str]:
        split = full_name.split(" ", maxsplit=1)
        first_name = split[0]
        last_name = split[1] if len(split) > 1 else ""
        return first_name, last_name

    @property
    def full_name(self):
        return f"{self.first_name} {self.last_name}".strip()

    def __str__(self):
        return self.full_name

    class Meta:
        ordering = ["date_joined"]
        constraints = [
            models.UniqueConstraint(Lower("email"), name="unique_lowercase_user_email"),
        ]


def one_hour_from_now() -> datetime:
    return timezone.now() + timedelta(hours=1)


class ResetPasswordToken(models.Model):
    token = models.TextField(default=token_urlsafe, editable=False)
    expiration_date = models.DateTimeField(default=one_hour_from_now, editable=False)
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, related_name="reset_password_token"
    )

    def __str__(self):
        return f"{self.user}'s reset password token"


def generate_token_id():
    """
    We need a token id to check if the rest of the token is correct. We don't need
    the full length of token_urlsafe as there won't be a lot of tokens in use.
    """
    return token_urlsafe(10)


class FingerprintField(models.CharField):
    """
    This field defaults to a random token hashed to prevent usage if there is a
    database leak. The actual token is exposed as `_raw_{field_name}` to display it to
    the user upon creation.
    """

    def pre_save(self, model_instance, add):
        if add:
            raw_fingerprint = token_urlsafe()
            setattr(model_instance, self.attname, make_password(raw_fingerprint))
            setattr(model_instance, f"_raw_{self.attname}", raw_fingerprint)
        return getattr(model_instance, self.attname)


class AccessToken(models.Model):
    _raw_fingerprint: str  # This value is generated by FingerprintField
    fingerprint = FingerprintField(max_length=128, editable=False)
    token_id = models.TextField(default=generate_token_id, editable=False)
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, related_name="access_token"
    )

    def check_fingerprint(self, fingerprint):
        return check_password(fingerprint, self.fingerprint)

    @property
    def token(self):
        if getattr(self, "_raw_fingerprint", None):
            return f"{self.token_id}.{self._raw_fingerprint}"
        return self.token_id

    def __str__(self):
        return f"{self.user}'s access token"


class EmailValidationToken(models.Model):
    token = models.TextField(unique=True, default=token_urlsafe)
    creation_date = models.DateTimeField(auto_now_add=True)
    user = models.OneToOneField(
        User, on_delete=models.CASCADE, related_name="email_validation_token"
    )
